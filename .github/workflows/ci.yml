name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [ '*' ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        node: [20.x]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: campaign_dev
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 2s --health-timeout 2s --health-retries 30
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 2s --health-timeout 2s --health-retries 30
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/campaign_dev
      REDIS_URL: redis://127.0.0.1:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install pnpm
        env:
          PNPM_VERSION: 8.15.4
        run: | # deterministic pnpm version (act + GitHub)
          corepack enable || true
          if command -v corepack >/dev/null 2>&1; then
            corepack prepare pnpm@${PNPM_VERSION} --activate || echo "corepack prepare failed, fallback"
          fi
            if ! command -v pnpm >/dev/null 2>&1; then
              npm install -g pnpm@${PNPM_VERSION}
            fi
          echo "Using pnpm version: $(pnpm -v)"

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-v1-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-v1-

      - name: Configure pnpm store path
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Display tool versions
        run: |
          echo "node: $(node -v)"
          echo "pnpm: $(pnpm -v)"
          echo "git sha: $GITHUB_SHA"

      - name: Install dependencies (lockfile or fallback)
        run: |
          REGENERATE=0
          if [ -f pnpm-lock.yaml ]; then
            echo "Lockfile present -> attempting frozen install"
            if pnpm install --frozen-lockfile; then
              echo "Frozen install succeeded"
            else
              echo "Frozen install failed (likely importer rename: dispatcher -> scheduler). Falling back without frozen lockfile." >&2
              REGENERATE=1
              pnpm install --no-frozen-lockfile
            fi
          else
            echo "No pnpm-lock.yaml found -> non-frozen install"
            pnpm install --no-frozen-lockfile
            REGENERATE=1
          fi
          if [ "$REGENERATE" = "1" ]; then
            echo "NOTE: Lockfile may need regeneration & commit after workspace rename. Run 'pnpm install' locally and commit updated pnpm-lock.yaml." >&2
          fi

      - name: Cache Prisma engines
        id: prisma-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/prisma
          key: prisma-engines-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            prisma-engines-${{ runner.os }}-

      - name: Generate Prisma Client
        working-directory: db
        run: pnpm prisma generate --schema=./prisma/schema.prisma

      - name: Push schema (db push)
        working-directory: db
        run: pnpm prisma db push --schema=./prisma/schema.prisma

      - name: Build packages (ordered)
        run: |
          pnpm --filter @campaign-service/db build
          pnpm --filter @campaign-service/scheduler build
          pnpm --filter @campaign-service/server build

      - name: Typecheck (noEmit)
        run: pnpm -r exec tsc --noEmit --pretty false --skipLibCheck

      - name: Run tests (vitest + coverage)
        run: pnpm test
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.node }}
          path: coverage
          if-no-files-found: ignore

      - name: Upload junit (if produced)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.node }}
          path: '**/junit.xml'
          if-no-files-found: ignore

      - name: Summarize coverage (light)
        if: always()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            lines=$(jq '.total.lines.pct' coverage/coverage-summary.json 2>/dev/null || echo 0)
            statements=$(jq '.total.statements.pct' coverage/coverage-summary.json 2>/dev/null || echo 0)
            branches=$(jq '.total.branches.pct' coverage/coverage-summary.json 2>/dev/null || echo 0)
            functions=$(jq '.total.functions.pct' coverage/coverage-summary.json 2>/dev/null || echo 0)
            echo "Coverage: lines=${lines}% statements=${statements}% branches=${branches}% functions=${functions}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "No coverage summary file found" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional future job stub for building and pushing images (kept disabled)
  # docker-build:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & push server image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: server/Dockerfile
  #         push: true
  #         tags: ghcr.io/${{ github.repository }}/campaign-server:latest
  #     - name: Build & push scheduler image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: scheduler/Dockerfile
  #         push: true
  #         tags: ghcr.io/${{ github.repository }}/campaign-scheduler:latest
